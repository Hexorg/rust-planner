task transport(package):
    when:
        package.at(x) and package.destination == y and truck.available
    do:
        ordered:
            truck.dispatch(x) # method, because task dispatch is defined
            truck.load(package) -> truck.busy = true # operator with inline effect specification
            truck.move(x, y) # operator 
            truck.return(x) # method, because task return is defined

on truck.move(x, y) cost 5: # operator effects specifications
    dist = distance(x, y)
    self.fuel -= self.mpg * dist

task dispatch(dest):
    ordered:
        truck.reserve() # operator
        truck.move(home, dest) # operator

task truck.return(x):
    ordered:
        truck.move(x, home) # operator
        truck.free() # operator

task transport_two(p1, p2):
    when p1.is_package() and p2.is_package(): # we can omit 'do' for one-line preconditions 
        transport(p1) # default unordered, method
        transport(p2) # method
    when other_condition:
        pass
    else:
        pass

# axiom example
plane.enough_fuel(current_pos, destination, speed):
    dist = distance(current_pos, destination)
    rate = self.fuel_burn_rate(speed)
    return self.fuel_level >= dist * rate